import requests
import os
from dotenv import load_dotenv

dotenv_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "../dotenv_files/.env"))
load_dotenv(dotenv_path)

def SeedDb():
    BASE_URL = "http://localhost:8000/api"  
    
    # Credenciais do admin
    ADMIN_DATA = {
        "username": os.getenv("DJANGO_SUPERUSER_USERNAME"), # Username do superuser criado
        "password": os.getenv("DJANGO_SUPERUSER_PASSWORD")  # Password do superuser criado
    }
    
    PROFESSIONS = [
        {
          "name": "Outros", "description": "Outras especialidades."
        },
        {
          "name": "M√©dico Cl√≠nico Geral", "description": "Respons√°vel por avaliar e diagnosticar pacientes, encaminhando para especialistas quando necess√°rio."
        },
        {
          "name": "M√©dico Cardiologista", "description": "Especialista no diagn√≥stico e tratamento de doen√ßas do cora√ß√£o e sistema circulat√≥rio."
        },
        {
          "name": "M√©dico Pediatra", "description": "Cuida da sa√∫de de beb√™s, crian√ßas e adolescentes, tratando e prevenindo doen√ßas."
        },
        {
          "name": "M√©dico Ginecologista", "description": "Especialista na sa√∫de da mulher, tratando quest√µes relacionadas ao sistema reprodutivo feminino."
        },
        {
          "name": "M√©dico Ortopedista", "description": "Foca no diagn√≥stico e tratamento de problemas nos ossos, m√∫sculos e articula√ß√µes."
        },
        {
          "name": "M√©dico Neurologista", "description": "Especializado em doen√ßas do sistema nervoso, incluindo c√©rebro e medula espinhal."
        },
        {
          "name": "M√©dico Dermatologista", "description": "Cuida da sa√∫de da pele, cabelos e unhas, tratando condi√ß√µes dermatol√≥gicas."
        },
        {
          "name": "M√©dico Psiquiatra", "description": "Especialista no diagn√≥stico e tratamento de transtornos mentais e emocionais."
        },
        {
          "name": "M√©dico Endocrinologista", "description": "Cuida do sistema end√≥crino, tratando dist√∫rbios hormonais como diabetes e tireoide."
        },
        {
          "name": "M√©dico Oftalmologista", "description": "Diagnostica e trata problemas relacionados √† vis√£o e aos olhos."
        },
        {
          "name": "M√©dico Otorrinolaringologista", "description": "Trata problemas no ouvido, nariz e garganta."
        },
        {
          "name": "M√©dico Urologista", "description": "Cuida do trato urin√°rio e do sistema reprodutivo masculino."
        },
        {
          "name": "M√©dico Nutr√≥logo", "description": "Foca no impacto da alimenta√ß√£o e nutri√ß√£o na sa√∫de dos pacientes."
        },
        {
          "name": "Fisioterapeuta", "description": "Ajuda na recupera√ß√£o e preven√ß√£o de problemas musculoesquel√©ticos e de mobilidade."
        },
        {
          "name": "Nutricionista", "description": "Elabora planos alimentares para promover a sa√∫de e tratar condi√ß√µes espec√≠ficas."
        },
        {
          "name": "Psic√≥logo", "description": "Atua na sa√∫de mental, ajudando pacientes com transtornos emocionais e comportamentais."
        },
        {
          "name": "Enfermeiro", "description": "Presta assist√™ncia a pacientes, administra medicamentos e coordena cuidados."
        },
        {
          "name": "T√©cnico de Enfermagem", "description": "Auxilia enfermeiros no cuidado direto com os pacientes."
        },
        {
          "name": "Terapeuta Ocupacional", "description": "Ajuda pacientes a desenvolverem habilidades para a vida di√°ria e o trabalho."
        },
        {
          "name": "Fonoaudi√≥logo", "description": "Atua no diagn√≥stico e tratamento de problemas de fala, audi√ß√£o e degluti√ß√£o."
        },
        {
          "name": "Assistente Social", "description": "Oferece suporte a pacientes e fam√≠lias em quest√µes sociais e psicol√≥gicas."
        },
        {
          "name": "Farmac√™utico", "description": "Respons√°vel pela dispensa√ß√£o e orienta√ß√£o sobre o uso correto de medicamentos."
        }
    ]
    
    try:
        print("\nüîπ Obtendo token de autentica√ß√£o...")
        print(f"üîπ Usu√°rio: {ADMIN_DATA['username']}")
        login_response = requests.post(f"{BASE_URL}/token/", json={
            "username": ADMIN_DATA["username"],
            "password": ADMIN_DATA["password"]
        })
        if login_response.status_code == 200:
            token = login_response.json().get("access")
            print(f"‚úÖ Token obtido: {token}")
        else:
            print(f"‚ö†Ô∏è Falha ao autenticar: {login_response.text}")
            return
        HEADERS = {"Authorization": f"Bearer {token}"}

        # Criando profiss√µes
        print("\nüîπ Criando profiss√µes...")
        profession_ids = []
        for profession in PROFESSIONS:
            response = requests.post(f"{BASE_URL}/profession/", json=profession, headers=HEADERS)
            if response.status_code == 201:
                profession_id = response.json().get("payload", {}).get("id")
                profession_ids.append(profession_id)
                print(f"‚úÖ Profiss√£o '{profession['name']}' criada! ID: {profession_id}")
            else:
                print(f"‚ö†Ô∏è Erro ao criar '{profession['name']}': {response.text}")

        # Criar profissionais de sa√∫de
        print("\nüîπ Criando profissionais de sa√∫de...")
        if profession_ids:
            health_professionals = [
                    {
  	                  "full_name":"Jonas Albuquerque",
  	                  "social_name":"",
  	                  "email":"teste@email.com",
  	                  "profession":profession_ids[15],
  	                  "zipcode":"60.110-301",
  	                  "phone":"85988776655",
  	                  "taxnumber":"943.799.610-52"
                    },
                    {
  	                  "full_name":"Luiz Henrique",
  	                  "social_name":"",
  	                  "email":"teste@email.com",
  	                  "profession":profession_ids[16],
  	                  "zipcode":"60.110-301",
  	                  "phone":"85988776655",
  	                  "taxnumber":"132.088.330-32"
                    },
                    {
  	                  "full_name":"Mariana Sampaio",
  	                  "social_name":"",
  	                  "email":"teste@email.com",
  	                  "profession":profession_ids[17],
  	                  "zipcode":"60.110-301",
  	                  "phone":"85988776655",
  	                  "taxnumber":"945.629.610-58"
                    },
                    {
  	                  "full_name":"Trajano de Almeida",
  	                  "social_name":"",
  	                  "email":"teste@email.com",
  	                  "profession":profession_ids[18],
  	                  "zipcode":"60.110-301",
  	                  "phone":"85988776655",
  	                  "taxnumber":"279.681.220-07"
                    },
                    {
  	                  "full_name":"Lucia Mendes",
  	                  "social_name":"",
  	                  "email":"teste@email.com",
  	                  "profession":profession_ids[0],
  	                  "zipcode":"60.110-301",
  	                  "phone":"85988776655",
  	                  "taxnumber":"374.601.430-14"
                    }
            ]
            for hp in health_professionals:
                response = requests.post(f"{BASE_URL}/healthprofessional/", json=hp, headers=HEADERS)
                if response.status_code == 201:
                    print(f"‚úÖ Profissional '{hp['full_name']}' criado!")
                else:
                    print(f"‚ö†Ô∏è Erro ao criar '{hp['full_name']}': {response.text}")
        else:
            print("‚ö†Ô∏è Nenhuma profiss√£o foi criada. N√£o foi poss√≠vel adicionar profissionais.")
        print("\nüéâ Seed finalizado com sucesso!")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro durante o seed: {e}")

SeedDb()